{
	"info": {
		"_postman_id": "44074f66-d6ee-498c-9664-eb2b8bf7f32e",
		"name": "Pheonix Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Helpers",
			"item": [
				{
					"name": "Clear DB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"url = pm.collectionVariables.get(\"BASE_URL\")\r",
									"\r",
									"pm.sendRequest({\r",
									"        url: `${url}/register`,\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            'Authorization': 'Bearer EMPTY',\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: {\r",
									"                \"email\": \"janet.wheeler@example.com\",\r",
									"                \"password\": \"pizza1\",\r",
									"                \"username\": \"brownlion897\",\r",
									"                \"admin_password\": \"super_top_secret\"  \r",
									"            }\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        if (!!response && response.code === 201) {\r",
									"            pm.collectionVariables.set(\"token\", response.json().token)\r",
									"        }\r",
									"\r",
									"        if (err) {\r",
									"            // Try Logging in if registration fails.\r",
									"            pm.sendRequest({\r",
									"                    url: `${url}/login`,\r",
									"                    method: \"POST\",\r",
									"                    header: {\r",
									"                        'Authorization': 'Basic amFuZXQud2hlZWxlckBleGFtcGxlLmNvbTpwaXp6YTE=',\r",
									"                        'Content-Type': 'application/json'\r",
									"                    },\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: {\r",
									"                            \"email\": \"janet.wheeler@example.com\",\r",
									"                            \"password\": \"pizza1\"\r",
									"                        }\r",
									"                    }\r",
									"                }, function (err, response) {\r",
									"                    if (!!response && response.code === 200) {\r",
									"                        pm.collectionVariables.set(\"token\", response.json().token)\r",
									"                    }\r",
									"\r",
									"                    if (err) {\r",
									"                        \r",
									"                    }\r",
									"            });\r",
									"        }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "janet.wheeler@example.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "pizza1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"id\": 1\r\n        },\r\n        {\r\n            \"id\": 2\r\n        },\r\n        {\r\n            \"id\": 3\r\n        },\r\n        {\r\n            \"id\": 4\r\n        },\r\n        {\r\n            \"id\": 5\r\n        },\r\n        {\r\n            \"id\": 6\r\n        },\r\n        {\r\n            \"id\": 7\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Init DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ----------------------------------------------------\r",
									"// Make 5 requsts to populate the Development database.\r",
									"// ----------------------------------------------------\r",
									"const users = JSON.parse(pm.collectionVariables.get(\"initial_users\"));\r",
									"\r",
									"\r",
									"console.log(\"TEST\", users)\r",
									"\r",
									"if (users && users.length > 0){\r",
									"    console.log(\"Running request:\", users.length)\r",
									"    postman.setNextRequest(\"Init DB\");\r",
									"} else {\r",
									"    console.log(\"Requests complete\")\r",
									"    postman.setNextRequest(\"Register User\");\r",
									"}\r",
									"\r",
									"pm.test(\"User created successfully\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Creates 5 users in the database.\r",
									"let users = JSON.parse(pm.collectionVariables.get(\"initial_users\"))\r",
									"\r",
									"\r",
									"if(!users || users.length == 0) {\r",
									"    users = [\r",
									"                {\r",
									"                    \"email\": \"henry.cook@example.com\",\r",
									"                    \"username\": \"orangefish832\",\r",
									"                    \"password\": \"martini\"\r",
									"                },\r",
									"                {\r",
									"                    \"email\": \"lola.garcia@example.com\",\r",
									"                    \"username\": \"angrygorilla780\",\r",
									"                    \"password\": \"iawgk2\"\r",
									"                },\r",
									"                {\r",
									"                    \"email\": \"kimberly.perry@example.com\",\r",
									"                    \"username\": \"orangegoose118\",\r",
									"                    \"password\": \"redskin\"\r",
									"                },\r",
									"                {\r",
									"                    \"email\": \"ava.frazier@example.com\",\r",
									"                    \"username\": \"redsnake459\",\r",
									"                    \"password\": \"dogbert\"\r",
									"                },\r",
									"                {\r",
									"                    \"email\": \"veronica.adams@example.com\",\r",
									"                    \"username\": \"ticklishbird109\",\r",
									"                    \"password\": \"blizzard\"\r",
									"                }\r",
									"            ]\r",
									"}\r",
									"\r",
									"let currentUser = users.shift();\r",
									"console.log(\"Current User:\", currentUser)\r",
									"pm.collectionVariables.set(\"user\", JSON.stringify(currentUser));\r",
									"pm.collectionVariables.set(\"initial_users\", JSON.stringify(users));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{user}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"register"
							]
						},
						"description": "Creates 5 initial users within the database."
					},
					"response": []
				}
			],
			"description": "Requests to help test various parts of the API functionality."
		},
		{
			"name": "API",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// // Test user was created successfully\r",
											"// if (pm.response.code === 201) {\r",
											"//     console.log\r",
											"//     pm.collectionVariables.set(\"token\", pm.response.json().token)\r",
											"// }\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.collectionVariables.set(\"token\", pm.response.json().token)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"email\": \"calvin.crawford@example.com\",\r\n    \"username\": \"crazywolf900\",\r\n    \"password\": \"cricket\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/register",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"register"
									]
								},
								"description": "Creates a single user in the database."
							},
							"response": []
						},
						{
							"name": "Login User Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"email\": \"calvin.crawford@example.com\",\r\n    \"password\": \"cricket\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								},
								"description": "Log in a previously registered user."
							},
							"response": []
						},
						{
							"name": "Login User Basic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    pm.collectionVariables.set(\"token\", pm.response.json().token)\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "cricket",
											"type": "string"
										},
										{
											"key": "username",
											"value": "calvin.crawford@example.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"email\": \"calvin.crawford@example.com\",\r\n    \"password\": \"cricket\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								},
								"description": "Log in a previously registered user."
							},
							"response": []
						},
						{
							"name": "List Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate all users returned.\", function () {\r",
											"    /**\r",
											"     * Validate the returned users meet spec.\r",
											"     */\r",
											"    \r",
											"    // Get response users.\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Get expected users.\r",
											"    let expected_users = JSON.parse(pm.collectionVariables.get(\"test_users\"))\r",
											"\r",
											"    jsonData.forEach((user, idx) => {\r",
											"        expected_user = expected_users[idx]\r",
											"        // Ensure the usernames match what is expected.\r",
											"        pm.expect(user.username).to.equal(expected_user.username)\r",
											"        // Check has properties.\r",
											"        pm.expect(user.last_login).not.to.be.undefined;\r",
											"        pm.expect(user.id).not.to.be.undefined;\r",
											"        // Check does not have properties.\r",
											"        pm.expect(user.email).to.be.undefined;\r",
											"        pm.expect(user.role_name).to.be.undefined;\r",
											"    })\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Lists all the users in the database."
							},
							"response": []
						},
						{
							"name": "Get User by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get a user <3>\", function () {\r",
											"    // Get response users.\r",
											"    let user = pm.response.json();\r",
											"\r",
											"    // Get expected users.\r",
											"    let expected_user = JSON.parse(pm.collectionVariables.get(\"test_users\"))[2]\r",
											"\r",
											"    console.log(user, expected_user)\r",
											"\r",
											"    // Ensure the usernames match what is expected.\r",
											"    pm.expect(user.username).to.equal(expected_user.username)\r",
											"    pm.expect(user.id).to.equal(3)\r",
											"    \r",
											"    // Check has properties.\r",
											"    pm.expect(user.last_login).not.to.be.undefined;\r",
											"\r",
											"    // Check does not have properties.\r",
											"    pm.expect(user.email).to.be.undefined;\r",
											"    pm.expect(user.role_name).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/users/3",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"3"
									]
								},
								"description": "Lists all the users in the database."
							},
							"response": []
						},
						{
							"name": "Get Current User Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get current user\", function () {\r",
											"    // Get response users.\r",
											"    let user = pm.response.json();\r",
											"\r",
											"    // Get expected users.\r",
											"    let expected_user = JSON.parse(pm.collectionVariables.get(\"test_users\"))[5]\r",
											"\r",
											"    console.log(user, expected_user)\r",
											"\r",
											"    // Ensure the usernames match what is expected.\r",
											"    pm.expect(user.username).to.equal(expected_user.username)\r",
											"    pm.expect(user.id).to.equal(6)\r",
											"    \r",
											"    // Check has properties.\r",
											"    pm.expect(user.last_login).not.to.be.undefined;\r",
											"\r",
											"    // Check does not have properties.\r",
											"    pm.expect(user.email).to.equal(expected_user.email)\r",
											"    pm.expect(user.role_name).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/users/me",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "Returns the user's information."
							},
							"response": []
						},
						{
							"name": "Update Current User Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"foobar\",\r\n    \"password\": \"top_secret\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/users/me",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "Updates the current user's information"
							},
							"response": []
						},
						{
							"name": "Login User Basic - New Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    pm.collectionVariables.set(\"token\", pm.response.json().token)\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "top_secret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "calvin.crawford@example.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"email\": \"calvin.crawford@example.com\",\r\n    \"password\": \"cricket\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								},
								"description": "Log in a previously registered user."
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/users/me",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "Deletes a single user given an email address."
							},
							"response": []
						}
					],
					"description": "User role endpoints."
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "Register Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {\r",
											"    pm.collectionVariables.set(\"token\", pm.response.json().token)\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"janet.wheeler@example.com\",\r\n    \"password\": \"pizza1\",\r\n    \"username\": \"brownlion897\",\r\n    \"admin_password\": \"super_top_secret\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/register",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"register"
									]
								},
								"description": "Creates a single user in the database."
							},
							"response": []
						},
						{
							"name": "Login Admin Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    pm.collectionVariables.set(\"token\", pm.response.json().token)\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"janet.wheeler@example.com\",\r\n    \"password\": \"pizza1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								},
								"description": "Login as an admin user account."
							},
							"response": []
						},
						{
							"name": "Login Admin  Basic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    pm.collectionVariables.set(\"token\", pm.response.json().token)\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "janet.wheeler@example.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "pizza1",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"janet.wheeler@example.com\",\r\n    \"password\": \"pizza1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								},
								"description": "Login as an admin user account."
							},
							"response": []
						},
						{
							"name": "List Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate all users returned.\", function () {\r",
											"    /**\r",
											"     * Validate the returned users meet spec.\r",
											"     */\r",
											"    \r",
											"    // Get response users.\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Get expected users.\r",
											"    let expected_users = JSON.parse(pm.collectionVariables.get(\"test_users\"))\r",
											"\r",
											"    let slicedArray = expected_users.slice(0, 5);\r",
											"\r",
											"    slicedArray.push(JSON.parse(pm.collectionVariables.get(\"admin_user\")))\r",
											"\r",
											"    console.log(slicedArray)\r",
											"\r",
											"    expected_users = slicedArray\r",
											"\r",
											"    jsonData.forEach((user, idx) => {\r",
											"        expected_user = expected_users[idx]\r",
											"        // Ensure the usernames match what is expected.\r",
											"        pm.expect(user.username).to.equal(expected_user.username)\r",
											"        // Check has properties.\r",
											"        pm.expect(user.last_login).not.to.be.undefined;\r",
											"        pm.expect(user.id).not.to.be.undefined;\r",
											"        // Check does not have properties.\r",
											"        pm.expect(user.email).to.equal(expected_user.email);\r",
											"        pm.expect(user.role_name).not.to.be.undefined;\r",
											"    })\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Lists all the users in the database."
							},
							"response": []
						},
						{
							"name": "Get User by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get a user <3>\", function () {\r",
											"    // Get response users.\r",
											"    let user = pm.response.json();\r",
											"\r",
											"    // Get expected users.\r",
											"    let expected_user = JSON.parse(pm.collectionVariables.get(\"test_users\"))[2]\r",
											"\r",
											"    console.log(user, expected_user)\r",
											"\r",
											"    // Ensure the usernames match what is expected.\r",
											"    pm.expect(user.username).to.equal(expected_user.username)\r",
											"    pm.expect(user.id).to.equal(3)\r",
											"    \r",
											"    // // Check has properties.\r",
											"    pm.expect(user.last_login).not.to.be.undefined;\r",
											"\r",
											"    // // Check does not have properties.\r",
											"    pm.expect(user.email).to.equal(expected_user.email)\r",
											"    pm.expect(user.role_name).not.to.be.undefined\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/users/3",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"3"
									]
								},
								"description": "Get a user by their ID."
							},
							"response": []
						},
						{
							"name": "Update User by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"url = pm.collectionVariables.get(\"BASE_URL\")\r",
											"token = pm.collectionVariables.get(\"token\")\r",
											"console.log(token)\r",
											"\r",
											"pm.test(\"Testing user updated\", function() {\r",
											"    pm.sendRequest({\r",
											"            url: `${url}/users/3`,\r",
											"            method: \"GET\",\r",
											"            header: {\r",
											"                'Authorization': `Bearer ${token}`,\r",
											"                'Content-Type': 'application/json'\r",
											"            }\r",
											"        }, function (err, response) {\r",
											"            if (err) {\r",
											"                pm.test.fail()\r",
											"            }\r",
											"            console.log(response.json())\r",
											"            pm.expect(response.json().username).to.equal(\"McGuffin\")\r",
											"        })\r",
											"\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"foobar\",\r\n    \"username\": \"McGuffin\",\r\n    \"role_id\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/users/3",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"3"
									]
								},
								"description": "Updates a single users information based on an ID."
							},
							"response": []
						},
						{
							"name": "Delete One User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Testing user updated\", function() {\r",
											"    pm.sendRequest({\r",
											"            url: `${url}/users/2`,\r",
											"            method: \"GET\",\r",
											"            header: {\r",
											"                'Authorization': `Bearer ${token}`,\r",
											"                'Content-Type': 'application/json'\r",
											"            }\r",
											"        }, function (err, response) {\r",
											"            if (err) {\r",
											"                pm.test.fail()\r",
											"            }\r",
											"            pm.expect(response.code).to.equal(404)\r",
											"        })\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/users/2",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"2"
									]
								},
								"description": "Deletes a user based on their ID."
							},
							"response": []
						},
						{
							"name": "Delete Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"id\": 2\r\n        },\r\n        {\r\n            \"id\": 3\r\n        },\r\n        {\r\n            \"id\": 4\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Delete a list of users."
							},
							"response": []
						}
					]
				}
			],
			"description": "Requests to test the API endpoints.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://127.0.0.1:5000/api/v1"
		},
		{
			"key": "initial_users",
			"value": "[\n  {\n    \"email\": \"henry.cook@example.com\",\n    \"username\": \"orangefish832\",\n    \"password\": \"martini\"\n  },\n  {\n    \"email\": \"lola.garcia@example.com\",\n    \"username\": \"angrygorilla780\",\n    \"password\": \"iawgk2\"\n  },\n  {\n    \"email\": \"kimberly.perry@example.com\",\n    \"username\": \"orangegoose118\",\n    \"password\": \"redskin\"\n  },\n  {\n    \"email\": \"ava.frazier@example.com\",\n    \"username\": \"redsnake459\",\n    \"password\": \"dogbert\"\n  },\n  {\n    \"email\": \"veronica.adams@example.com\",\n    \"username\": \"ticklishbird109\",\n    \"password\": \"blizzard\"\n  }\n]"
		},
		{
			"key": "user",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "test_users",
			"value": "[\n  {\n    \"email\": \"henry.cook@example.com\",\n    \"username\": \"orangefish832\",\n    \"password\": \"martini\"\n  },\n  {\n    \"email\": \"lola.garcia@example.com\",\n    \"username\": \"angrygorilla780\",\n    \"password\": \"iawgk2\"\n  },\n  {\n    \"email\": \"kimberly.perry@example.com\",\n    \"username\": \"orangegoose118\",\n    \"password\": \"redskin\"\n  },\n  {\n    \"email\": \"ava.frazier@example.com\",\n    \"username\": \"redsnake459\",\n    \"password\": \"dogbert\"\n  },\n  {\n    \"email\": \"veronica.adams@example.com\",\n    \"username\": \"ticklishbird109\",\n    \"password\": \"blizzard\"\n  },\n  {\n    \"email\": \"calvin.crawford@example.com\",\n    \"username\": \"crazywolf900\",\n    \"password\": \"cricket\"\n  }\n]"
		},
		{
			"key": "admin_user",
			"value": "{\n    \"email\": \"janet.wheeler@example.com\",\n    \"password\": \"pizza1\",\n    \"username\": \"brownlion897\",\n    \"admin_password\": \"super_top_secret\"\n}"
		}
	]
}